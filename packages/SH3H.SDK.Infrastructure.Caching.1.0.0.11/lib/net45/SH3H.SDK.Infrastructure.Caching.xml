<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SH3H.SDK.Infrastructure.Caching</name>
    </assembly>
    <members>
        <member name="T:SH3H.SDK.Infrastructure.Caching.BaseCache">
            <summary>
            定义缓存基类
            </summary>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.BaseCache.#ctor">
            <summary>
            内部构造函数
            </summary>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.BaseCache.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="P:SH3H.SDK.Infrastructure.Caching.BaseCache.Disposed">
            <summary>
            获取或设置一个值用于表示当前对象是否已经释放。
            </summary>
        </member>
        <member name="P:SH3H.SDK.Infrastructure.Caching.BaseCache.Disposing">
            <summary>
            获取或设置一个值用于表示当前对象是否正在释放中。 
            </summary>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.BaseCache.Add``1(System.String,``0)">
            <summary>
            添加缓存值
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存值</param>
            <typeparam name="TValue">缓存值类型</typeparam>
            <returns>如果缓存中不存在对应的缓存键返回<c>true</c>，否则返回<c>false</c></returns>
            <exception cref="T:System.ArgumentNullException">
            如果 <paramref name="key"/> 或者 <paramref name="value"/> 为null
            </exception>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.BaseCache.Add``1(System.String,``0,System.String)">
            <summary>
            在缓存区域中添加缓存值
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存值</param>
            <param name="region">缓存区域</param>
            <typeparam name="TValue">缓存值类型</typeparam>
            <returns>如果缓存中不存在对应的缓存键返回<c>true</c>，否则返回<c>false</c></returns>
            <exception cref="T:System.ArgumentNullException">
            如果 <paramref name="key"/>, <paramref name="value"/> 或者 <paramref name="region"/> 为null
            </exception>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.BaseCache.Add``1(SH3H.SDK.Infrastructure.Caching.CacheItem{``0})">
            <summary>
            添加缓存项
            </summary>
            <param name="item">缓存项</param>
            <typeparam name="TValue">缓存值类型</typeparam>
            <returns>如果缓存中不存在对应的缓存键返回<c>true</c>，否则返回<c>false</c></returns>
            <exception cref="T:System.ArgumentNullException">
            如果 <paramref name="item"/> 为null
            </exception>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.BaseCache.Clear">
            <summary>
            清空缓存。缓存中的所有缓存值和缓存区域都将被清除。
            </summary>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.BaseCache.ClearRegion(System.String)">
            <summary>
            清空缓存区域。指定缓存区域中的缓存值会被清除。
            </summary>
            <param name="region">缓存区域</param>
            <exception cref="T:System.ArgumentNullException">
            如果 <paramref name="region"/> 为null
            </exception>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.BaseCache.Expire(System.String,SH3H.SDK.Infrastructure.Caching.ExpirationMode,System.TimeSpan)">
            <summary>
            设置指定缓存键的缓存模式和缓存超时时间
            </summary>
            <param name="key">缓存键</param>
            <param name="mode">缓存模式</param>
            <param name="timeout">缓存超时时间</param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.BaseCache.Expire(System.String,System.String,SH3H.SDK.Infrastructure.Caching.ExpirationMode,System.TimeSpan)">
            <summary>
            设置缓存区域中指定缓存键的缓存模式和缓存超时时间
            </summary>
            <param name="key">缓存键</param>
            <param name="region">缓存区域</param>
            <param name="mode">缓存模式</param>
            <param name="timeout">缓存超时时间</param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.BaseCache.Expire(System.String,System.DateTimeOffset)">
            <summary>
            设置指定缓存键的绝对超时时间
            </summary>
            <param name="key">缓存键</param>
            <param name="absoluteExpiration">缓存绝对超时时间</param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.BaseCache.Expire(System.String,System.String,System.DateTimeOffset)">
            <summary>
            设置缓存区域中指定缓存键的绝对超时时间
            </summary>
            <param name="key">缓存键</param>
            <param name="region">缓存区域</param>
            <param name="absoluteExpiration">缓存绝对超时时间</param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.BaseCache.Expire(System.String,System.TimeSpan)">
            <summary>
            设置指定缓存键的滑动超时时间
            </summary>
            <param name="key">缓存键</param>
            <param name="slidingExpiration">缓存滑动超时时间</param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.BaseCache.Expire(System.String,System.String,System.TimeSpan)">
            <summary>
            设置缓存区域指定缓存键的滑动超时时间
            </summary>
            <param name="key">缓存键</param>
            <param name="region">缓存区域</param>
            <param name="slidingExpiration">缓存滑动超时时间</param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.BaseCache.Get``1(System.String)">
            <summary>
            获取指定缓存键的缓存值
            </summary>
            <param name="key">缓存键</param>
            <typeparam name="TValue">缓存值类型</typeparam>
            <returns>返回缓存值</returns>
            <exception cref="T:System.ArgumentNullException">
            如果 <paramref name="key"/> 为null
            </exception>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.BaseCache.GetByRegion``1(System.String)">
            <summary>
            获取指定区域的缓存集合
            </summary>
            <typeparam name="TValue">缓存值类型</typeparam>
            <param name="region">区域</param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.BaseCache.GetByRegionInternal``1(System.String)">
            <summary>
            获取缓存缓存项集合根据键值模糊查询
            </summary>
            <typeparam name="TValue">缓存值类型</typeparam>
            <param name="keyPattern">key Pattern</param>
            <returns>返回缓存项集合</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.BaseCache.Get``1(System.String,System.String)">
            <summary>
            获取缓存区域中指定缓存键的缓存值
            </summary>
            <param name="key">缓存键</param>
            <param name="region">缓存区域</param>
            <typeparam name="TValue">缓存值类型</typeparam>
            <returns>返回缓存值</returns>
            <exception cref="T:System.ArgumentNullException">
            如果 <paramref name="key"/> 或者 <paramref name="region"/> 为null
            </exception>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.BaseCache.GetCacheItem``1(System.String)">
            <summary>
            获取指定缓存键的缓存项
            </summary>        
            <param name="key">缓存键</param>
            <typeparam name="TValue">缓存值类型</typeparam>
            <returns>返回缓存项</returns>
            <exception cref="T:System.ArgumentNullException">
            如果 <paramref name="key"/> 为null
            </exception>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.BaseCache.GetCacheItem``1(System.String,System.String)">
            <summary>
            获取缓存区域中指定缓存键的缓存项
            </summary>        
            <param name="key">缓存键</param>
            <param name="region">缓存区域</param>
            <typeparam name="TValue">缓存值类型</typeparam>
            <returns>返回缓存项</returns>
            <exception cref="T:System.ArgumentNullException">
            如果 <paramref name="key"/> 或者 <paramref name="region"/> 为null
            </exception>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.BaseCache.GetCacheItemsByKeypattern``1(System.String)">
            <summary>
            获取缓存缓存项集合根据键值模糊查询
            </summary>
            <typeparam name="TValue">缓存值类型</typeparam>
            <param name="keyPattern">key Pattern</param>
            <returns>返回缓存项集合</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.BaseCache.Put``1(System.String,``0)">
            <summary>
            设置缓存值。如果缓存键已经存在则替换缓存值。
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存值</param>
            <typeparam name="TValue">缓存值类型</typeparam>
            <exception cref="T:System.ArgumentNullException">
            如果 <paramref name="key"/> 或者 <paramref name="value"/> 为null
            </exception>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.BaseCache.Put``1(System.String,``0,System.String)">
            <summary>
            在缓存区域中设置缓存值。如果缓存键已经存在则替换缓存值。
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存值</param>
            <param name="region">缓存区域</param>
            <typeparam name="TValue">缓存值类型</typeparam>
            <exception cref="T:System.ArgumentNullException">
            如果 <paramref name="key"/>, <paramref name="value"/> 或者 <paramref name="region"/> 为null
            </exception>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.BaseCache.Put``1(SH3H.SDK.Infrastructure.Caching.CacheItem{``0})">
            <summary>
            设置缓存项。如果缓存键已经存在则替换缓存项。
            </summary>
            <param name="item">缓存项</param>
            <typeparam name="TValue">缓存值类型</typeparam>
            <exception cref="T:System.ArgumentNullException">
            如果 <paramref name="item"/> 为null
            </exception>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.BaseCache.Remove(System.String)">
            <summary>
            删除缓存值。
            </summary>
            <param name="key">缓存键</param>
            <returns>如果缓存键存在且删除成功则返回<c>true</c>，否则返回<c>false</c></returns>
            <exception cref="T:System.ArgumentNullException">
            如果 <paramref name="key"/> 为null
            </exception>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.BaseCache.Remove(System.String,System.String)">
            <summary>
            从缓存区域中删除缓存值。
            </summary>
            <param name="key">缓存键</param>
            <param name="region">缓存区域</param>
            <returns>如果缓存键存在且删除成功则返回<c>true</c>，否则返回<c>false</c></returns>
            <exception cref="T:System.ArgumentNullException">
            如果 <paramref name="key"/> 或者 <paramref name="region"/> 为null
            </exception>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.BaseCache.RemoveExpiration(System.String)">
            <summary>
            移除指定缓存值上的缓存超时设置
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.BaseCache.RemoveExpiration(System.String,System.String)">
            <summary>
            移除缓存区域中指定缓存值上的缓存超时设置
            </summary>
            <param name="key">缓存键</param>
            <param name="region">缓存区域</param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.BaseCache.AddInternal``1(SH3H.SDK.Infrastructure.Caching.CacheItem{``0})">
            <summary>
            添加缓存项
            </summary>
            <param name="item">缓存项</param>
            <typeparam name="TValue">缓存值类型</typeparam>
            <returns>如果缓存中不存在对应的缓存键返回<c>true</c>，否则返回<c>false</c></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.BaseCache.PutInternal``1(SH3H.SDK.Infrastructure.Caching.CacheItem{``0})">
            <summary>
            设置缓存项。如果缓存键已经存在则替换缓存项。
            </summary>
            <param name="item">缓存项</param>
            <typeparam name="TValue">缓存值类型</typeparam>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.BaseCache.GetCacheItemInternal``1(System.String)">
            <summary>
            获取指定缓存键的缓存项
            </summary>        
            <param name="key">缓存键</param>
            <typeparam name="TValue">缓存值类型</typeparam>
            <returns>返回缓存项</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.BaseCache.GetCacheItemInternal``1(System.String,System.String)">
            <summary>
            获取指定缓存键的缓存项
            </summary>        
            <param name="key">缓存键</param>
            <param name="region">缓存所在区域</param>
            <typeparam name="TValue">缓存值类型</typeparam>
            <returns>返回缓存项</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.BaseCache.GetCacheItemsByKeypatternInternal``1(System.String)">
            <summary>
            获取缓存缓存项集合根据键值模糊查询
            </summary>
            <typeparam name="TValue">缓存值类型</typeparam>
            <param name="keyPattern">key Pattern</param>
            <returns>返回缓存项集合</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.BaseCache.RemoveInternal(System.String)">
            <summary>
            删除缓存值。
            </summary>
            <param name="key">缓存键</param>
            <returns>如果缓存键存在且删除成功则返回<c>true</c>，否则返回<c>false</c></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.BaseCache.RemoveInternal(System.String,System.String)">
            <summary>
            从缓存区域中删除缓存值。
            </summary>
            <param name="key">缓存键</param>
            <param name="region">缓存区域</param>
            <returns>如果缓存键存在且删除成功则返回<c>true</c>，否则返回<c>false</c></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.BaseCache.GetCasted``1(System.Object)">
            <summary>
            获取缓存值并转换为<c>TOut</c>类型
            </summary>
            <typeparam name="TValue">返回的数据类型</typeparam>
            <param name="value">转换前的数据值</param>
            <returns>返回转换后的数据值</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.BaseCache.Dispose(System.Boolean)">
            <summary>
            释放托管和非托管资源
            </summary>
            <param name="disposeManaged">
            当参数值为<c>true</c>时将释放托管和非托管资源，<c>false</c>将只释放非托管资源。 
            </param>
        </member>
        <member name="T:SH3H.SDK.Infrastructure.Caching.CacheItem`1">
            <summary>
            定义缓存对象。封装了缓存项Key和缓存项Value。
            </summary>
            <typeparam name="TValue">缓存值类型</typeparam>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.CacheItem`1.#ctor(System.String,`0)">
            <summary>
            构造函数
            </summary>
            <param name="key">缓存项关键字</param>
            <param name="value">缓存值</param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.CacheItem`1.#ctor(System.String,System.String,`0)">
            <summary>
            构造函数
            </summary>
            <param name="key">缓存项关键字</param>
            <param name="region">缓存项所在区域</param>
            <param name="value">缓存值</param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.CacheItem`1.#ctor(System.String,`0,SH3H.SDK.Infrastructure.Caching.ExpirationMode,System.TimeSpan)">
            <summary>
            构造函数
            </summary>
            <param name="key">缓存项关键字</param>
            <param name="value">缓存值</param>
            <param name="expiration">缓存项过期模式</param>
            <param name="timeout">缓存项过期时间</param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.CacheItem`1.#ctor(System.String,System.String,`0,SH3H.SDK.Infrastructure.Caching.ExpirationMode,System.TimeSpan)">
            <summary>
            构造函数
            </summary>
            <param name="key">缓存项关键字</param>
            <param name="region">缓存项所在区域</param>
            <param name="value">缓存值</param>
            <param name="expiration">缓存项过期模式</param>
            <param name="timeout">缓存项过期时间</param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.CacheItem`1.#ctor(System.String,System.String,`0,System.Nullable{SH3H.SDK.Infrastructure.Caching.ExpirationMode},System.Nullable{System.TimeSpan},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            私有构造函数
            </summary>
            <param name="key">缓存项关键字</param>
            <param name="region">缓存项所在区域</param>
            <param name="value">缓存值</param>
            <param name="expiration">缓存项过期模式</param>
            <param name="timeout">缓存项过期时间</param>
            <param name="created">缓存项创建时间戳</param>
            <param name="lastAccessed">缓存项最后访问时间戳</param> 
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.CacheItem`1.#ctor">
            <summary>
            内部构造函数
            </summary>
        </member>
        <member name="P:SH3H.SDK.Infrastructure.Caching.CacheItem`1.CreatedUtc">
            <summary>
            获取缓存项创建时间戳
            </summary>
        </member>
        <member name="P:SH3H.SDK.Infrastructure.Caching.CacheItem`1.ExpirationMode">
            <summary>
            获取缓存项过期模式
            </summary>
        </member>
        <member name="P:SH3H.SDK.Infrastructure.Caching.CacheItem`1.ExpirationTimeout">
            <summary>
            获取缓存项过期时间
            </summary>
        </member>
        <member name="P:SH3H.SDK.Infrastructure.Caching.CacheItem`1.Key">
            <summary>
            获取缓存项关键字
            </summary>
        </member>
        <member name="P:SH3H.SDK.Infrastructure.Caching.CacheItem`1.LastAccessedUtc">
            <summary>
            获取或设置最后访问时间戳
            </summary>
        </member>
        <member name="P:SH3H.SDK.Infrastructure.Caching.CacheItem`1.Region">
            <summary>
            获取缓存项所在区域 
            </summary>
        </member>
        <member name="P:SH3H.SDK.Infrastructure.Caching.CacheItem`1.Value">
            <summary>
            获取缓存值
            </summary>
        </member>
        <member name="P:SH3H.SDK.Infrastructure.Caching.CacheItem`1.ValueType">
            <summary>
            获取缓存值类型
            </summary>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.CacheItem`1.WithExpiration(SH3H.SDK.Infrastructure.Caching.ExpirationMode,System.TimeSpan)">
            <summary>
            创建当前缓存项的副本并支持过期
            </summary>
            <param name="mode">缓存项过期模式</param>
            <param name="timeout">缓存项超时时间</param>
            <returns>返回新的缓存项实例</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.CacheItem`1.WithAbsoluteExpiration(System.DateTimeOffset)">
            <summary>
            创建当前缓存项的副本并支持绝对时间过期
            </summary>
            <param name="absoluteExpiration">缓存项过期时间</param>
            <returns>返回新的缓存项实例</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.CacheItem`1.WithSlidingExpiration(System.TimeSpan)">
            <summary>
            创建当前缓存项的副本并支持滑动窗口过期
            </summary>
            <param name="slidingExpiration">缓存项过期时间</param>
            <returns>返回新的缓存项实例</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.CacheItem`1.WithNoExpiration">
            <summary>
            创建当前缓存项的副本并移除过期模式
            </summary>
            <returns>返回新的缓存项实例</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.CacheItem`1.WithValue(`0)">
            <summary>
            创建当前缓存项的副本并更新缓存项中的缓存值。
            </summary>
            <param name="value">缓存值</param>
            <returns>返回新的缓存项实例</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.CacheItem`1.WithCreated(System.DateTime)">
            <summary>
            创建当前缓存项的副本并更新缓存项创建时间
            </summary>
            <param name="created">创建时间</param>
            <returns>返回新的缓存项实例</returns>
        </member>
        <member name="T:SH3H.SDK.Infrastructure.Caching.CacheManager">
            <summary>
            定义缓存管理器对象，用于获取、创建、管理缓存器实例。
            </summary>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.CacheManager.#ctor">
            <summary>
            私有构造函数
            </summary>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.CacheManager.Get">
            <summary>
            获取或创建远程缓存器对象实例
            </summary>
            <returns>返回缓存器对象实例</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.CacheManager.GetLocal">
            <summary>
            获取或创建缓存器对象实例
            </summary>
            <returns>返回缓存器对象实例</returns>
        </member>
        <member name="F:SH3H.SDK.Infrastructure.Caching.CacheManager.defaultCache">
            <summary>
            定义默认的基于ObjectCache缓存
            </summary>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.CacheManager.AddDictionary``2(System.Collections.Generic.IDictionary{``0,``1},System.String)">
            <summary>
            在缓存区域中添加缓存值
            </summary>
            <param name="dic">缓存值字典</param>
            <param name="region">缓存区域</param>
            <typeparam name="TKey">缓存键类型</typeparam>
            <typeparam name="TValue">缓存值类型</typeparam>
            <exception cref="T:System.ArgumentNullException">
            如果 <paramref name="dic"/> 或者 <paramref name="region"/> 为null
            </exception>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.CacheManager.Clear">
            <summary>
            清空缓存。缓存中的所有缓存值和缓存区域都将被清除。
            </summary>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.CacheManager.ClearRegion(System.String)">
            <summary>
            清空缓存区域。指定缓存区域中的缓存值会被清除。
            </summary>
            <param name="region">缓存区域</param>
            <exception cref="T:System.ArgumentNullException">
            如果 <paramref name="region"/> 为null
            </exception>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.CacheManager.Expire(System.String,SH3H.SDK.Infrastructure.Caching.ExpirationMode,System.TimeSpan)">
            <summary>
            设置指定缓存键的缓存模式和缓存超时时间
            </summary>
            <param name="key">缓存键</param>
            <param name="mode">缓存模式</param>
            <param name="timeout">缓存超时时间</param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.CacheManager.Expire(System.String,System.String,SH3H.SDK.Infrastructure.Caching.ExpirationMode,System.TimeSpan)">
            <summary>
            设置缓存区域中指定缓存键的缓存模式和缓存超时时间
            </summary>
            <param name="key">缓存键</param>
            <param name="region">缓存区域</param>
            <param name="mode">缓存模式</param>
            <param name="timeout">缓存超时时间</param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.CacheManager.Expire(System.Runtime.Caching.ObjectCache,System.String,SH3H.SDK.Infrastructure.Caching.ExpirationMode,System.TimeSpan)">
            <summary>
            设置指定缓存键的缓存模式和缓存超时时间
            </summary>
            <param name="cache">缓存</param>
            <param name="key">缓存键</param>
            <param name="mode">缓存区域</param>
            <param name="timeout">缓存超时时间</param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.CacheManager.AddInternal``1(SH3H.SDK.Infrastructure.Caching.CacheItem{``0})">
            <summary>
            添加缓存项
            </summary>
            <param name="item">缓存项</param>
            <typeparam name="TValue">缓存值类型</typeparam>
            <returns>如果缓存中不存在对应的缓存键返回<c>true</c>，否则返回<c>false</c></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.CacheManager.PutInternal``1(SH3H.SDK.Infrastructure.Caching.CacheItem{``0})">
            <summary>
            设置缓存项。如果缓存键已经存在则替换缓存项。
            </summary>
            <param name="item">缓存项</param>
            <typeparam name="TValue">缓存值类型</typeparam>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.CacheManager.GetCacheItemInternal``1(System.String)">
            <summary>
            获取指定缓存键的缓存项
            </summary>        
            <param name="key">缓存键</param>
            <typeparam name="TValue">缓存值类型</typeparam>
            <returns>返回缓存项</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.CacheManager.GetCacheItemInternal``1(System.String,System.String)">
            <summary>
            获取指定缓存键的缓存项
            </summary>        
            <param name="key">缓存键</param>
            <param name="region">缓存所在区域</param>
            <typeparam name="TValue">缓存值类型</typeparam>
            <returns>返回缓存项</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.CacheManager.RemoveInternal(System.String)">
            <summary>
            删除缓存值。
            </summary>
            <param name="key">缓存键</param>
            <returns>如果缓存键存在且删除成功则返回<c>true</c>，否则返回<c>false</c></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.CacheManager.RemoveInternal(System.String,System.String)">
            <summary>
            从缓存区域中删除缓存值。
            </summary>
            <param name="key">缓存键</param>
            <param name="region">缓存区域</param>
            <returns>如果缓存键存在且删除成功则返回<c>true</c>，否则返回<c>false</c></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.CacheManager.GetCacheItemsByKeypatternInternal``1(System.String)">
            <summary>
            获取缓存缓存项集合根据键值模糊查询
            </summary>
            <typeparam name="TValue">缓存值类型</typeparam>
            <param name="keyPattern">key Pattern</param>
            <returns>返回缓存项集合</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.CacheManager.Exist(System.String)">
            <summary>
            判断缓存中是否存在指定的关键字
            </summary>
            <param name="key">缓存键</param>
            <returns>如果缓存键存在则返回true，否则返回false</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.CacheManager.Exist(System.String,System.String)">
            <summary>
            判断缓存中是否存在指定的关键字
            </summary>
            <param name="key">缓存键</param>
            <returns>如果缓存键存在则返回true，否则返回false</returns>
        </member>
        <member name="T:SH3H.SDK.Infrastructure.Caching.ExpirationMode">
            <summary>
            定义缓存项过期模式
            </summary>
        </member>
        <member name="F:SH3H.SDK.Infrastructure.Caching.ExpirationMode.None">
            <summary>
            缓存项无过期
            </summary>
        </member>
        <member name="F:SH3H.SDK.Infrastructure.Caching.ExpirationMode.Sliding">
            <summary>
            定义sliding过期模式。当缓存项被访问后过期你时间将被刷新。
            </summary>
        </member>
        <member name="F:SH3H.SDK.Infrastructure.Caching.ExpirationMode.Absolute">
            <summary>
            定义绝对时间过期模式。缓存项将在指定时间后过期。
            </summary>
        </member>
        <member name="T:SH3H.SDK.Infrastructure.Caching.ICache">
            <summary>
            定义缓存对象接口，该接口为所有类型缓存实现的基础接口
            </summary>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.ICache.Add``1(System.String,``0)">
            <summary>
            添加缓存值
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存值</param>
            <typeparam name="TValue">缓存值类型</typeparam>
            <returns>如果缓存中不存在对应的缓存键返回<c>true</c>，否则返回<c>false</c></returns>
            <exception cref="T:System.ArgumentNullException">
            如果 <paramref name="key"/> 或者 <paramref name="value"/> 为null
            </exception>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.ICache.Add``1(System.String,``0,System.String)">
            <summary>
            在缓存区域中添加缓存值
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存值</param>
            <param name="region">缓存区域</param>
            <typeparam name="TValue">缓存值类型</typeparam>
            <returns>如果缓存中不存在对应的缓存键返回<c>true</c>，否则返回<c>false</c></returns>
            <exception cref="T:System.ArgumentNullException">
            如果 <paramref name="key"/>, <paramref name="value"/> 或者 <paramref name="region"/> 为null
            </exception>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.ICache.AddDictionary``2(System.Collections.Generic.IDictionary{``0,``1},System.String)">
            <summary>
            在缓存区域中添加缓存值
            </summary>
            <param name="dic">缓存值字典</param>
            <param name="region">缓存区域</param>
            <typeparam name="TKey">缓存键类型</typeparam>
            <typeparam name="TValue">缓存值类型</typeparam>
            <exception cref="T:System.ArgumentNullException">
            如果 <paramref name="dic"/> 或者 <paramref name="region"/> 为null
            </exception>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.ICache.Add``1(SH3H.SDK.Infrastructure.Caching.CacheItem{``0})">
            <summary>
            添加缓存项
            </summary>
            <param name="item">缓存项</param>
            <typeparam name="TValue">缓存值类型</typeparam>
            <returns>如果缓存中不存在对应的缓存键返回<c>true</c>，否则返回<c>false</c></returns>
            <exception cref="T:System.ArgumentNullException">
            如果 <paramref name="item"/> 为null
            </exception>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.ICache.Clear">
            <summary>
            清空缓存。缓存中的所有缓存值和缓存区域都将被清除。
            </summary>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.ICache.ClearRegion(System.String)">
            <summary>
            清空缓存区域。指定缓存区域中的缓存值会被清除。
            </summary>
            <param name="region">缓存区域</param>
            <exception cref="T:System.ArgumentNullException">
            如果 <paramref name="region"/> 为null
            </exception>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.ICache.Expire(System.String,SH3H.SDK.Infrastructure.Caching.ExpirationMode,System.TimeSpan)">
            <summary>
            设置指定缓存键的缓存模式和缓存超时时间
            </summary>
            <param name="key">缓存键</param>
            <param name="mode">缓存模式</param>
            <param name="timeout">缓存超时时间</param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.ICache.Expire(System.String,System.String,SH3H.SDK.Infrastructure.Caching.ExpirationMode,System.TimeSpan)">
            <summary>
            设置缓存区域中指定缓存键的缓存模式和缓存超时时间
            </summary>
            <param name="key">缓存键</param>
            <param name="region">缓存区域</param>
            <param name="mode">缓存模式</param>
            <param name="timeout">缓存超时时间</param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.ICache.Expire(System.String,System.DateTimeOffset)">
            <summary>
            设置指定缓存键的绝对超时时间
            </summary>
            <param name="key">缓存键</param>
            <param name="absoluteExpiration">缓存绝对超时时间</param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.ICache.Expire(System.String,System.String,System.DateTimeOffset)">
            <summary>
            设置缓存区域中指定缓存键的绝对超时时间
            </summary>
            <param name="key">缓存键</param>
            <param name="region">缓存区域</param>
            <param name="absoluteExpiration">缓存绝对超时时间</param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.ICache.Expire(System.String,System.TimeSpan)">
            <summary>
            设置指定缓存键的滑动超时时间
            </summary>
            <param name="key">缓存键</param>
            <param name="slidingExpiration">缓存滑动超时时间</param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.ICache.Expire(System.String,System.String,System.TimeSpan)">
            <summary>
            设置缓存区域指定缓存键的滑动超时时间
            </summary>
            <param name="key">缓存键</param>
            <param name="region">缓存区域</param>
            <param name="slidingExpiration">缓存滑动超时时间</param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.ICache.Get``1(System.String)">
            <summary>
            获取指定缓存键的缓存值
            </summary>
            <param name="key">缓存键</param>
            <typeparam name="TValue">缓存值类型</typeparam>
            <returns>返回缓存值</returns>
            <exception cref="T:System.ArgumentNullException">
            如果 <paramref name="key"/> 为null
            </exception>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.ICache.GetByRegion``1(System.String)">
            <summary>
            获取指定区域的缓存集合
            </summary>
            <typeparam name="TValue">缓存值类型</typeparam>
            <param name="region">区域</param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.ICache.Get``1(System.String,System.String)">
            <summary>
            获取缓存区域中指定缓存键的缓存值
            </summary>
            <param name="key">缓存键</param>
            <param name="region">缓存区域</param>
            <typeparam name="TValue">缓存值类型</typeparam>
            <returns>返回缓存值</returns>
            <exception cref="T:System.ArgumentNullException">
            如果 <paramref name="key"/> 或者 <paramref name="region"/> 为null
            </exception>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.ICache.GetCacheItem``1(System.String)">
            <summary>
            获取指定缓存键的缓存项
            </summary>        
            <param name="key">缓存键</param>
            <typeparam name="TValue">缓存值类型</typeparam>
            <returns>返回缓存项</returns>
            <exception cref="T:System.ArgumentNullException">
            如果 <paramref name="key"/> 为null
            </exception>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.ICache.GetCacheItem``1(System.String,System.String)">
            <summary>
            获取缓存区域中指定缓存键的缓存项
            </summary>        
            <param name="key">缓存键</param>
            <param name="region">缓存区域</param>
            <typeparam name="TValue">缓存值类型</typeparam>
            <returns>返回缓存项</returns>
            <exception cref="T:System.ArgumentNullException">
            如果 <paramref name="key"/> 或者 <paramref name="region"/> 为null
            </exception>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.ICache.GetCacheItemsByKeypattern``1(System.String)">
            <summary>
            获取缓存缓存项集合根据键值模糊查询
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="keyPattern"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.ICache.Put``1(System.String,``0)">
            <summary>
            设置缓存值。如果缓存键已经存在则替换缓存值。
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存值</param>
            <typeparam name="TValue">缓存值类型</typeparam>
            <exception cref="T:System.ArgumentNullException">
            如果 <paramref name="key"/> 或者 <paramref name="value"/> 为null
            </exception>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.ICache.Put``1(System.String,``0,System.String)">
            <summary>
            在缓存区域中设置缓存值。如果缓存键已经存在则替换缓存值。
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存值</param>
            <param name="region">缓存区域</param>
            <typeparam name="TValue">缓存值类型</typeparam>
            <exception cref="T:System.ArgumentNullException">
            如果 <paramref name="key"/>, <paramref name="value"/> 或者 <paramref name="region"/> 为null
            </exception>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.ICache.Put``1(SH3H.SDK.Infrastructure.Caching.CacheItem{``0})">
            <summary>
            设置缓存项。如果缓存键已经存在则替换缓存项。
            </summary>
            <param name="item">缓存项</param>
            <typeparam name="TValue">缓存值类型</typeparam>
            <exception cref="T:System.ArgumentNullException">
            如果 <paramref name="item"/> 为null
            </exception>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.ICache.Remove(System.String)">
            <summary>
            删除缓存值。
            </summary>
            <param name="key">缓存键</param>
            <returns>如果缓存键存在且删除成功则返回<c>true</c>，否则返回<c>false</c></returns>
            <exception cref="T:System.ArgumentNullException">
            如果 <paramref name="key"/> 为null
            </exception>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.ICache.Remove(System.String,System.String)">
            <summary>
            从缓存区域中删除缓存值。
            </summary>
            <param name="key">缓存键</param>
            <param name="region">缓存区域</param>
            <returns>如果缓存键存在且删除成功则返回<c>true</c>，否则返回<c>false</c></returns>
            <exception cref="T:System.ArgumentNullException">
            如果 <paramref name="key"/> 或者 <paramref name="region"/> 为null
            </exception>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.ICache.RemoveExpiration(System.String)">
            <summary>
            移除指定缓存值上的缓存超时设置
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.ICache.RemoveExpiration(System.String,System.String)">
            <summary>
            移除缓存区域中指定缓存值上的缓存超时设置
            </summary>
            <param name="key">缓存键</param>
            <param name="region">缓存区域</param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.ICache.Exist(System.String)">
            <summary>
            判断缓存中是否存在指定的关键字
            </summary>
            <param name="key">缓存键</param>
            <returns>如果缓存键存在则返回true，否则返回false</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.ICache.Exist(System.String,System.String)">
            <summary>
            判断缓存中某个区域是否存在指定的关键字
            </summary>
            <param name="key">缓存键</param>
            <param name="region">缓存区域</param>
            <returns>如果缓存键存在则返回true，否则返回false</returns>
        </member>
        <member name="T:SH3H.SDK.Infrastructure.Caching.RedisCache">
            <summary>
            定义基于Redis的缓存器
            </summary>
        </member>
        <member name="P:SH3H.SDK.Infrastructure.Caching.RedisCache.DbNum">
            <summary>
            对应的db
            </summary>
        </member>
        <member name="F:SH3H.SDK.Infrastructure.Caching.RedisCache._connection">
            <summary>
            保存Redis缓存服务连接对象
            </summary> 
        </member>
        <member name="F:SH3H.SDK.Infrastructure.Caching.RedisCache.CustomKey">
            <summary>
            
            </summary>
        </member>
        <member name="F:SH3H.SDK.Infrastructure.Caching.RedisCache.option">
            <summary>
            配置对象
            </summary>
        </member>
        <member name="F:SH3H.SDK.Infrastructure.Caching.RedisCache.server">
            <summary>
            Redis服务
            </summary>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.Get">
            <summary>
            获取Redis缓存对象实例
            </summary>
            <returns>返回缓存管理器</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="dbNum">使用的db</param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.#ctor(System.Int32,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="dbNum">使用的db</param>
            <param name="readWriteHosts">连接串</param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.AddDictionary``2(System.Collections.Generic.IDictionary{``0,``1},System.String)">
            <summary>
            在缓存区域中添加缓存值
            </summary>
            <param name="dic">缓存值字典</param>
            <param name="region">缓存区域</param>
            <typeparam name="TKey">缓存键类型</typeparam>
            <typeparam name="TValue">缓存值类型</typeparam>
            <exception cref="T:System.ArgumentNullException">
            如果 <paramref name="dic"/> 或者 <paramref name="region"/> 为null
            </exception>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.Clear">
            <summary>
            清空缓存。缓存中的所有缓存值和缓存区域都将被清除。
            </summary>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.ClearRegion(System.String)">
            <summary>
            清空缓存区域。指定缓存区域中的缓存值会被清除。
            </summary>
            <param name="region">缓存区域</param>
            <exception cref="T:System.ArgumentNullException">
            如果 <paramref name="region"/> 为null
            </exception>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.Expire(System.String,SH3H.SDK.Infrastructure.Caching.ExpirationMode,System.TimeSpan)">
            <summary>
            设置指定缓存键的缓存模式和缓存超时时间
            </summary>
            <param name="key">缓存键</param>
            <param name="mode">缓存模式</param>
            <param name="timeout">缓存超时时间</param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.Expire(System.String,System.String,SH3H.SDK.Infrastructure.Caching.ExpirationMode,System.TimeSpan)">
            <summary>
            设置缓存区域中指定缓存键的缓存模式和缓存超时时间
            </summary>
            <param name="key">缓存键</param>
            <param name="region">缓存区域</param>
            <param name="mode">缓存模式</param>
            <param name="timeout">缓存超时时间</param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.AddInternal``1(SH3H.SDK.Infrastructure.Caching.CacheItem{``0})">
            <summary>
            添加缓存项
            </summary>
            <param name="item">缓存项</param>
            <typeparam name="TValue">缓存值类型</typeparam>
            <returns>如果缓存中不存在对应的缓存键返回<c>true</c>，否则返回<c>false</c></returns>
            <exception cref="T:System.ArgumentNullException">
            如果 <paramref name="item"/> 为null
            </exception>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.PutInternal``1(SH3H.SDK.Infrastructure.Caching.CacheItem{``0})">
            <summary>
            设置缓存项。如果缓存键已经存在则替换缓存项。
            </summary>
            <param name="item">缓存项</param>
            <typeparam name="TValue">缓存值类型</typeparam>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.GetCacheItemInternal``1(System.String)">
            <summary>
            获取指定缓存键的缓存项
            </summary>        
            <param name="key">缓存键</param>
            <typeparam name="TValue">缓存值类型</typeparam>
            <returns>返回缓存项</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.GetCacheItemInternal``1(System.String,System.String)">
            <summary>
            获取指定缓存键的缓存项
            </summary>        
            <param name="key">缓存键</param>
            <param name="region">缓存所在区域</param>
            <typeparam name="TValue">缓存值类型</typeparam>
            <returns>返回缓存项</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.GetCacheItemsByKeypatternInternal``1(System.String)">
            <summary>
            获取缓存缓存项集合根据键值模糊查询
            </summary>
            <typeparam name="TValue">缓存值类型</typeparam>
            <param name="keyPattern">key Pattern</param>
            <returns>返回缓存项集合</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.RemoveInternal(System.String)">
            <summary>
            删除缓存值。
            </summary>
            <param name="key">缓存键</param>
            <returns>如果缓存键存在且删除成功则返回<c>true</c>，否则返回<c>false</c></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.RemoveInternal(System.String,System.String)">
            <summary>
            从缓存区域中删除缓存值。
            </summary>
            <param name="key">缓存键</param>
            <param name="region">缓存区域</param>
            <returns>如果缓存键存在且删除成功则返回<c>true</c>，否则返回<c>false</c></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.GetCacheitemByRegionInternal``1(System.String)">
            <summary>
            获取指定区域的缓存集合
            </summary>
            <typeparam name="TValue">缓存值类型</typeparam>
            <param name="region">区域</param>
            <returns>返回缓存对象集合</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.GetByRegionInternal``1(System.String)">
            <summary>
            获取指定区域的缓存集合
            </summary>
            <typeparam name="TValue">缓存值类型</typeparam>
            <param name="region">区域</param>
            <returns>返回缓存值集合</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.ToJson(System.Object)">
            <summary>
            将对象转换为JSON字符串
            </summary>
            <param name="value">待转换的对象实例</param>
            <returns>返回JSON字符串</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.FromJson``1(System.String)">
            <summary>
            将JSON字符串转换为对象
            </summary>
            <typeparam name="TValue">返回对象类型</typeparam>
            <param name="json">json字符串</param>
            <returns>返回转换后的对象</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.Exist(System.String)">
            <summary>
            判断缓存中是否存在指定的关键字
            </summary>
            <param name="key">缓存键</param>
            <returns>如果缓存键存在则返回true，否则返回false</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.Exist(System.String,System.String)">
            <summary>
            判断缓存中某个区域是否存在指定的关键字
            </summary>
            <param name="key">缓存键</param>
            <param name="region">缓存区域</param>
            <returns>如果缓存键存在则返回true，否则返回false</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.StringSet(System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            保存单个key value
            </summary>
            <param name="key">Redis Key</param>
            <param name="value">保存的值</param>
            <param name="expiry">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.StringSet(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue}})">
            <summary>
            保存多个key value
            </summary>
            <param name="keyValues">键值对</param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.StringSet``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            保存一个对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.StringGet(System.String)">
            <summary>
            获取单个key的值
            </summary>
            <param name="key">Redis Key</param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.StringGet(System.Collections.Generic.List{System.String})">
            <summary>
            获取多个Key
            </summary>
            <param name="listKey">Redis Key集合</param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.StringGet``1(System.String)">
            <summary>
            获取一个key的对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.StringIncrement(System.String,System.Double)">
            <summary>
            为数字增长val
            </summary>
            <param name="key"></param>
            <param name="val">可以为负</param>
            <returns>增长后的值</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.StringDecrement(System.String,System.Double)">
            <summary>
            为数字减少val
            </summary>
            <param name="key"></param>
            <param name="val">可以为负</param>
            <returns>减少后的值</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.StringSetAsync(System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            保存单个key value
            </summary>
            <param name="key">Redis Key</param>
            <param name="value">保存的值</param>
            <param name="expiry">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.StringSetAsync(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue}})">
            <summary>
            保存多个key value
            </summary>
            <param name="keyValues">键值对</param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.StringSetAsync``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            保存一个对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.StringGetAsync(System.String)">
            <summary>
            获取单个key的值
            </summary>
            <param name="key">Redis Key</param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.StringGetAsync(System.Collections.Generic.List{System.String})">
            <summary>
            获取多个Key
            </summary>
            <param name="listKey">Redis Key集合</param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.StringGetAsync``1(System.String)">
            <summary>
            获取一个key的对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.StringIncrementAsync(System.String,System.Double)">
            <summary>
            为数字增长val
            </summary>
            <param name="key"></param>
            <param name="val">可以为负</param>
            <returns>增长后的值</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.StringDecrementAsync(System.String,System.Double)">
            <summary>
            为数字减少val
            </summary>
            <param name="key"></param>
            <param name="val">可以为负</param>
            <returns>减少后的值</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.HashExists(System.String,System.String)">
            <summary>
            判断某个数据是否已经被缓存
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.HashSet``1(System.String,System.String,``0)">
            <summary>
            存储数据到hash表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.HashDelete(System.String,System.String)">
            <summary>
            移除hash中的某值
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.HashDelete(System.String,System.Collections.Generic.List{StackExchange.Redis.RedisValue})">
            <summary>
            移除hash中的多个值
            </summary>
            <param name="key"></param>
            <param name="dataKeys"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.HashGet``1(System.String,System.String)">
            <summary>
            从hash表获取数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.HashIncrement(System.String,System.String,System.Double)">
            <summary>
            为数字增长val
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="val">可以为负</param>
            <returns>增长后的值</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.HashDecrement(System.String,System.String,System.Double)">
            <summary>
            为数字减少val
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="val">可以为负</param>
            <returns>减少后的值</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.HashKeys``1(System.String)">
            <summary>
            获取hashkey所有Redis key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.HashExistsAsync(System.String,System.String)">
            <summary>
            判断某个数据是否已经被缓存
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.HashSetAsync``1(System.String,System.String,``0)">
            <summary>
            存储数据到hash表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.HashDeleteAsync(System.String,System.String)">
            <summary>
            移除hash中的某值
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.HashDeleteAsync(System.String,System.Collections.Generic.List{StackExchange.Redis.RedisValue})">
            <summary>
            移除hash中的多个值
            </summary>
            <param name="key"></param>
            <param name="dataKeys"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.HashGeAsync``1(System.String,System.String)">
            <summary>
            从hash表获取数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.HashIncrementAsync(System.String,System.String,System.Double)">
            <summary>
            为数字增长val
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="val">可以为负</param>
            <returns>增长后的值</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.HashDecrementAsync(System.String,System.String,System.Double)">
            <summary>
            为数字减少val
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="val">可以为负</param>
            <returns>减少后的值</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.HashKeysAsync``1(System.String)">
            <summary>
            获取hashkey所有Redis key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.ListRemove``1(System.String,``0)">
            <summary>
            移除指定ListId的内部List的值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.ListRange``1(System.String)">
            <summary>
            获取指定key的List
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.ListRightPush``1(System.String,``0)">
            <summary>
            入队
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.ListRightPop``1(System.String)">
            <summary>
            出队
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.ListLeftPush``1(System.String,``0)">
            <summary>
            入栈
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.ListLeftPop``1(System.String)">
            <summary>
            出栈
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.ListLength(System.String)">
            <summary>
            获取集合中的数量
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.ListRemoveAsync``1(System.String,``0)">
            <summary>
            移除指定ListId的内部List的值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.ListRangeAsync``1(System.String)">
            <summary>
            获取指定key的List
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.ListRightPushAsync``1(System.String,``0)">
            <summary>
            入队
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.ListRightPopAsync``1(System.String)">
            <summary>
            出队
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.ListLeftPushAsync``1(System.String,``0)">
            <summary>
            入栈
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.ListLeftPopAsync``1(System.String)">
            <summary>
            出栈
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.ListLengthAsync(System.String)">
            <summary>
            获取集合中的数量
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.SortedSetAdd``1(System.String,``0,System.Double)">
            <summary>
            添加
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="score"></param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.SortedSetRemove``1(System.String,``0)">
            <summary>
            删除
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.SortedSetRangeByRank``1(System.String)">
            <summary>
            获取全部
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.SortedSetRangeByScore``1(System.String,System.Double,System.Double)">
            <summary>
            获取key下指定范围的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.SortedSetLastByScore``1(System.String,System.Double)">
            <summary>
            获取 最后一个 接近Score的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="score"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.SortedSetFirstByScore``1(System.String,System.Double)">
            <summary>
            获取 第一个 接近Score的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="score"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.SortedSetLength(System.String)">
            <summary>
            获取集合中的数量
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.SortedSetRemove(System.String,System.Double,System.Double)">
            <summary>
            移除key下指定范围的所有值包含min和max
            </summary>
            <param name="key"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.SortedSetAddAsync``1(System.String,``0,System.Double)">
            <summary>
            添加
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="score"></param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.SortedSetAddAsync``1(System.String,System.Collections.Generic.IDictionary{``0,System.Double})">
            <summary>
            添加
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dicEntry"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.SortedSetRemoveAsync``1(System.String,``0)">
            <summary>
            删除
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.SortedSetRangeByRankAsync``1(System.String)">
            <summary>
            获取全部
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.SortedSetLengthAsync(System.String)">
            <summary>
            获取集合中的数量
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.SortedSetRemoveAsync(System.String,System.Double,System.Double)">
            <summary>
            移除key下指定范围的值
            </summary>
            <param name="key"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.KeyDelete(System.String)">
            <summary>
            删除单个key
            </summary>
            <param name="key">redis key</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.KeyDelete(System.Collections.Generic.List{System.String})">
            <summary>
            删除多个key
            </summary>
            <param name="keys">rediskey</param>
            <returns>成功删除的个数</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.KeyExists(System.String)">
            <summary>
            判断key是否存储
            </summary>
            <param name="key">redis key</param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.KeyRename(System.String,System.String)">
            <summary>
            重新命名key
            </summary>
            <param name="key">就的redis key</param>
            <param name="newKey">新的redis key</param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.KeyExpire(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            设置Key的时间
            </summary>
            <param name="key">redis key</param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.Keys(System.String)">
            <summary>
            查询pattern下的所有keys
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.Subscribe(System.String,System.Action{StackExchange.Redis.RedisChannel,StackExchange.Redis.RedisValue})">
            <summary>
            Redis发布订阅  订阅
            </summary>
            <param name="subChannel"></param>
            <param name="handler"></param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.Publish``1(System.String,``0)">
            <summary>
            Redis发布订阅  发布
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.Unsubscribe(System.String)">
            <summary>
            Redis发布订阅  取消订阅
            </summary>
            <param name="channel"></param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.UnsubscribeAll">
            <summary>
            Redis发布订阅  取消全部订阅
            </summary>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.LockRelease(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)">
            <summary>
            Releases a lock, if the token value is correct
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.LockTake(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,System.TimeSpan,StackExchange.Redis.CommandFlags)">
            <summary>
            Takes a lock (specifying a token value) if it is not already taken
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiry"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.LockReleaseAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)">
            <summary>
            Releases a lock, if the token value is correct
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.LockTakeAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,System.TimeSpan,StackExchange.Redis.CommandFlags)">
            <summary>
            Takes a lock (specifying a token value) if it is not already taken
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiry"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisCache.SetSysCustomKey(System.String)">
            <summary>
            设置前缀
            </summary>
            <param name="customKey"></param>
        </member>
        <member name="T:SH3H.SDK.Infrastructure.Caching.IRedisCache">
            <summary>
            Redis缓存接口
            </summary>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.HashDecrement(System.String,System.String,System.Double)">
            <summary>
            为数字减少val
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="val">可以为负</param>
            <returns>减少后的值</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.HashDecrementAsync(System.String,System.String,System.Double)">
            <summary>
            为数字减少val
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="val">可以为负</param>
            <returns>减少后的值</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.HashDelete(System.String,System.Collections.Generic.List{StackExchange.Redis.RedisValue})">
            <summary>
            移除hash中的多个值
            </summary>
            <param name="key"></param>
            <param name="dataKeys"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.HashDelete(System.String,System.String)">
            <summary>
            移除hash中的某值
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.HashDeleteAsync(System.String,System.Collections.Generic.List{StackExchange.Redis.RedisValue})">
            <summary>
            移除hash中的多个值
            </summary>
            <param name="key"></param>
            <param name="dataKeys"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.HashDeleteAsync(System.String,System.String)">
            <summary>
            移除hash中的某值
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.HashExists(System.String,System.String)">
            <summary>
            判断某个数据是否已经被缓存
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.HashExistsAsync(System.String,System.String)">
            <summary>
            判断某个数据是否已经被缓存
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.HashGeAsync``1(System.String,System.String)">
            <summary>
            从hash表获取数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.HashGet``1(System.String,System.String)">
            <summary>
            从hash表获取数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.HashIncrement(System.String,System.String,System.Double)">
            <summary>
            为数字增长val
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="val">可以为负</param>
            <returns>增长后的值</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.HashIncrementAsync(System.String,System.String,System.Double)">
            <summary>
            为数字增长val
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="val">可以为负</param>
            <returns>增长后的值</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.HashKeys``1(System.String)">
            <summary>
            获取hashkey所有Redis key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.HashKeysAsync``1(System.String)">
            <summary>
            获取hashkey所有Redis key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.HashSet``1(System.String,System.String,``0)">
            <summary>
            存储数据到hash表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.HashSetAsync``1(System.String,System.String,``0)">
            <summary>
            存储数据到hash表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.KeyDelete(System.Collections.Generic.List{System.String})">
            <summary>
            删除多个key
            </summary>
            <param name="keys">rediskey</param>
            <returns>成功删除的个数</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.KeyDelete(System.String)">
            <summary>
            删除单个key
            </summary>
            <param name="key">redis key</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.KeyExists(System.String)">
            <summary>
            判断key是否存储
            </summary>
            <param name="key">redis key</param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.KeyExpire(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            设置Key的时间
            </summary>
            <param name="key">redis key</param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.KeyRename(System.String,System.String)">
            <summary>
            重新命名key
            </summary>
            <param name="key">就的redis key</param>
            <param name="newKey">新的redis key</param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.Keys(System.String)">
            <summary>
            查询pattern下的所有keys
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.ListLeftPop``1(System.String)">
            <summary>
            出栈
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.ListLeftPopAsync``1(System.String)">
            <summary>
            出栈
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.ListLeftPush``1(System.String,``0)">
            <summary>
            入栈
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.ListLeftPushAsync``1(System.String,``0)">
            <summary>
            入栈
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.ListLength(System.String)">
            <summary>
            获取集合中的数量
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.ListLengthAsync(System.String)">
            <summary>
            获取集合中的数量
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.ListRange``1(System.String)">
            <summary>
            获取指定key的List
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.ListRangeAsync``1(System.String)">
            <summary>
            获取指定key的List
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.ListRemove``1(System.String,``0)">
            <summary>
            移除指定ListId的内部List的值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.ListRemoveAsync``1(System.String,``0)">
            <summary>
            移除指定ListId的内部List的值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.ListRightPop``1(System.String)">
            <summary>
            出队
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.ListRightPopAsync``1(System.String)">
            <summary>
            出队
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.ListRightPush``1(System.String,``0)">
            <summary>
            入队
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.ListRightPushAsync``1(System.String,``0)">
            <summary>
            入队
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.SortedSetAdd``1(System.String,``0,System.Double)">
            <summary>
            添加
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="score"></param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.SortedSetAddAsync``1(System.String,System.Collections.Generic.IDictionary{``0,System.Double})">
            <summary>
            添加
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dicEntry"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.SortedSetAddAsync``1(System.String,``0,System.Double)">
            <summary>
            添加
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="score"></param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.SortedSetFirstByScore``1(System.String,System.Double)">
            <summary>
            获取 第一个 接近Score的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="score"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.SortedSetLastByScore``1(System.String,System.Double)">
            <summary>
            获取 最后一个 接近Score的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="score"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.SortedSetLength(System.String)">
            <summary>
            获取集合中的数量
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.SortedSetRangeByRank``1(System.String)">
            <summary>
            根据key获取全部
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.SortedSetRangeByScore``1(System.String,System.Double,System.Double)">
            <summary>
            获取key下指定范围的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.SortedSetRemove(System.String,System.Double,System.Double)">
            <summary>
            移除key下指定范围的所有值包含min和max
            </summary>
            <param name="key"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.SortedSetRemove``1(System.String,``0)">
            <summary>
            删除
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.SortedSetRemoveAsync(System.String,System.Double,System.Double)">
            <summary>
            移除key下指定范围的值
            </summary>
            <param name="key"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.SortedSetRemoveAsync``1(System.String,``0)">
            <summary>
            删除
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.StringDecrement(System.String,System.Double)">
            <summary>
            为数字减少val
            </summary>
            <param name="key"></param>
            <param name="val">可以为负</param>
            <returns>减少后的值</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.StringDecrementAsync(System.String,System.Double)">
            <summary>
            为数字减少val
            </summary>
            <param name="key"></param>
            <param name="val">可以为负</param>
            <returns>减少后的值</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.StringGet(System.String)">
            <summary>
            获取单个key的值
            </summary>
            <param name="key">Redis Key</param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.StringGet``1(System.String)">
            <summary>
            获取一个key的对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.StringGetAsync(System.Collections.Generic.List{System.String})">
            <summary>
            获取多个Key
            </summary>
            <param name="listKey">Redis Key集合</param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.StringGetAsync(System.String)">
            <summary>
            获取单个key的值
            </summary>
            <param name="key">Redis Key</param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.StringGetAsync``1(System.String)">
            <summary>
            获取一个key的对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.StringIncrement(System.String,System.Double)">
            <summary>
            为数字增长val
            </summary>
            <param name="key"></param>
            <param name="val">可以为负</param>
            <returns>增长后的值</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.StringIncrementAsync(System.String,System.Double)">
            <summary>
            为数字增长val
            </summary>
            <param name="key"></param>
            <param name="val">可以为负</param>
            <returns>增长后的值</returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.StringSet(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue}})">
            <summary>
            保存多个key value
            </summary>
            <param name="keyValues">键值对</param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.StringSet(System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            保存单个key value
            </summary>
            <param name="key">Redis Key</param>
            <param name="value">保存的值</param>
            <param name="expiry">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.StringSet``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            保存一个对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.StringSetAsync(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue}})">
            <summary>
            保存多个key value
            </summary>
            <param name="keyValues">键值对</param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.StringSetAsync(System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            保存单个key value
            </summary>
            <param name="key">Redis Key</param>
            <param name="value">保存的值</param>
            <param name="expiry">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.StringSetAsync``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            保存一个对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.Subscribe(System.String,System.Action{StackExchange.Redis.RedisChannel,StackExchange.Redis.RedisValue})">
            <summary>
            Redis发布订阅  订阅
            </summary>
            <param name="subChannel"></param>
            <param name="handler"></param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.Publish``1(System.String,``0)">
            <summary>
            Redis发布订阅  发布
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.Unsubscribe(System.String)">
            <summary>
            Redis发布订阅  取消订阅
            </summary>
            <param name="channel"></param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.UnsubscribeAll">
            <summary>
            Redis发布订阅  取消全部订阅
            </summary>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.LockRelease(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)">
            <summary>
            Releases a lock, if the token value is correct
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.LockTake(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,System.TimeSpan,StackExchange.Redis.CommandFlags)">
            <summary>
            Takes a lock (specifying a token value) if it is not already taken
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiry"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.LockReleaseAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,StackExchange.Redis.CommandFlags)">
            <summary>
            Releases a lock, if the token value is correct
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.IRedisCache.LockTakeAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,System.TimeSpan,StackExchange.Redis.CommandFlags)">
            <summary>
            Takes a lock (specifying a token value) if it is not already taken
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiry"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="T:SH3H.SDK.Infrastructure.Caching.RedisConnectionHelp">
            <summary>
            ConnectionMultiplexer对象管理帮助类
            </summary>
        </member>
        <member name="P:SH3H.SDK.Infrastructure.Caching.RedisConnectionHelp.Instance">
            <summary>
            单例获取
            </summary>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisConnectionHelp.GetConnectionMultiplexer(System.String)">
            <summary>
            缓存获取
            </summary>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisConnectionHelp.MuxerConfigurationChanged(System.Object,StackExchange.Redis.EndPointEventArgs)">
            <summary>
            配置更改时
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisConnectionHelp.MuxerErrorMessage(System.Object,StackExchange.Redis.RedisErrorEventArgs)">
            <summary>
            发生错误时
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisConnectionHelp.MuxerConnectionRestored(System.Object,StackExchange.Redis.ConnectionFailedEventArgs)">
            <summary>
            重新建立连接之前的错误
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisConnectionHelp.MuxerConnectionFailed(System.Object,StackExchange.Redis.ConnectionFailedEventArgs)">
            <summary>
            连接失败 ， 如果重新连接成功你将不会收到这个通知
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisConnectionHelp.MuxerHashSlotMoved(System.Object,StackExchange.Redis.HashSlotMovedEventArgs)">
            <summary>
            更改集群
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SH3H.SDK.Infrastructure.Caching.RedisConnectionHelp.MuxerInternalError(System.Object,StackExchange.Redis.InternalErrorEventArgs)">
            <summary>
            redis类库错误
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
    </members>
</doc>
